[null,{"name":"join","temp":"user","event-type":"6","_id":"hjnmP","actions":[{"info":"0","find":"925570869147873320","storage":"1","varName":"kanal","name":"Find Channel"},{"server":"0","varName":"","info":"35","storage":"1","varName2":"ktory","name":"Store Server Info"},{"member":"2","varName":"user","info":"16","storage":"1","varName2":"avatar_URL","name":"Store Member Info"},{"title":"","author":"","color":"","timestamp":"true","url":"","authorIcon":"","imageUrl":"","thumbUrl":"${tempVars(\"avatar_URL\")}","storage":"1","varName":"embed","name":"Create Embed Message"},{"storage":"1","varName":"embed","fieldName":"Witamy na pokładzie serwera ProjectBP!","message":"${tempVars(\"user\")}  musisz teraz przejść weryfikację swojego konta poprzez zapoznanie się z 📜-reg","inline":"1","name":"Add Embed Field"},{"storage":"1","varName":"embed","message":"🤟🏼","footerIcon":"","name":"Set Embed Footer"},{"storage":"1","varName":"embed","channel":"5","varName2":"kanal","storage3":"0","varName3":"","name":"Send Embed Message"}]},{"name":"status","temp":"10","event-type":"3","_id":"PvrBw","actions":[{"gameName":"🔎| Wszystkie komendy znajdziesz pod b!help","gameLink":"","name":"Set Bot Game"}]},{"name":"[Check]VerifyChannelContent","temp":"message","event-type":"2","_id":"QLAIx","actions":[{"info":"19","storage":"1","varName2":"botprefix","name":"Store Bot Client Info"},{"message":"1","varName":"message","info":"4","storage":"1","varName2":"messagechannel","name":"Store Message Info"},{"message":"1","varName":"message","info":"3","storage":"1","varName2":"messageauthor","name":"Store Message Info"},{"member":"2","varName":"messageauthor","info":"1","storage":"1","varName2":"messageauthorid","name":"Store Member Info"},{"channel":"3","varName":"messagechannel","info":"1","storage":"1","varName2":"messagechannelid","name":"Store Channel Info"},{"storage":"1","varName":"messageauthorid","comparison":"1","value":"'BOT_ID'","iftrue":"1","iftrueVal":"","iffalse":"0","iffalseVal":"","name":"Check Variable"},{"storage":"1","varName":"messagechannelid","comparison":"1","value":"'VERIFY_CHANNEL_ID'","iftrue":"0","iftrueVal":"","iffalse":"1","iffalseVal":"","name":"Check Variable"},{"message":"1","varName":"message","info":"2","storage":"1","varName2":"messagetext","name":"Store Message Info"},{"storage":"1","varName":"messagetext","comparison":"1","value":"'tempVars(\"botprefix\")verify'","iftrue":"1","iftrueVal":"","iffalse":"0","iffalseVal":"","name":"Check Variable"},{"storage":"1","varName":"message","name":"Delete Message"}]},{"name":"giveawayCheck","temp":"10","event-type":"3","_id":"eavvT","actions":[{"behavior":"0","interpretation":"1","code":"const fs = require('fs');\nlet giveawaysDue = [];\nvar timeNow = Math.floor(Date.now() / 1000);\nvar counter = 0;\nvar interval;\nif (globalVars(\"giveawayRan\") == null) {\n    Actions.storeValue(1, 3, \"giveawayRan\", cache);\n\n    var giveawaySysData = Actions.giveawaySystem;\n\n    for (var key in giveawaySysData) {\n        if (giveawaySysData.hasOwnProperty(key)) {\n            let giveaways = giveawaySysData[key];\n            let dueGive = giveaways.filter(({\n                finishUnix\n            }) => finishUnix <= timeNow);\n            if (dueGive.length > 0) {\n                dueGive.forEach(async f => {\n                    giveawaysDue.push(f);\n                    giveaways.splice(giveaways.findIndex(e => e.id === f.id), 1)\n                });\n\n                fs.writeFile(\"./data/giveawaySystem/giveawayData.json\", JSON.stringify(giveawaySysData), function(err) {\n                    if (err) {\n                        return console.log(err);\n                    }\n                });\n            }\n        }\n    }\n    if (giveawaysDue.length > 0) {\n        interval = setInterval(drawWinners, 2000);\n    }\n\n}\n\nasync function drawWinners() {\n    var preCount = counter;\n    var channelToFetch = client.channels.cache.get(giveawaysDue[preCount][\"channel\"]);\n    if (channelToFetch != null) {\n        channelToFetch.messages.fetch(giveawaysDue[preCount][\"giveawayMessageID\"]).then(giveawayMessage => {\n            var giveawayEmojiCache = giveawayMessage.reactions.cache.get('🎉');\n            giveawayEmojiCache.users.fetch().then(async function(giveawayUsers) {\n                if (giveawayEmojiCache.count > 100) {\n                    for (i = 0; i < giveawayEmojiCache.count; i++) {\n                        var fetchedEmojiUsers = await giveawayEmojiCache.users.fetch({\n                            after: giveawayUsers.last().id\n                        });\n                        await giveawayUsers.concat(fetchedEmojiUsers);\n                    }\n                }\n\n                giveawayUsers = giveawayUsers.array();\n                giveawayUsers = await giveawayUsers.filter(object => object.id != client.user.id);\n                var numberOfWinners = parseInt(giveawaysDue[preCount][\"winner\"]);\n                var gw = giveawayMessage.embeds[0];\n\n                gw.color = 0x000000;\n                if (gw.fields.length == 6) {\n                    gw.fields[5].value = \"Ended\"\n                }\n                gw.description = \"**Giveaway Ended**\\n\\n\" + gw.description\n\n                var winnerArray = [];\n                var winnerText = \"\";\n                if (giveawayUsers.length > 0) {\n                    if (giveawayUsers.length > numberOfWinners) {\n                        for (var i = 0; i < numberOfWinners; i++) {\n                            var randomNumber = Math.floor(Math.random() * giveawayUsers.length);\n                            winnerArray.push(`${giveawayUsers[randomNumber]}`);\n                            giveawayUsers.splice(giveawayUsers.indexOf(randomNumber), randomNumber);\n                        }\n                    } else if (giveawayUsers.length <= numberOfWinners) {\n                        for (i = 0; i < giveawayUsers.length; i++) {\n                            winnerArray.push(`${giveawayUsers[i]}`);\n                        }\n                    }\n\n                    for (i = 0; i < winnerArray.length; i++) {\n                        winnerText = winnerText + winnerArray[i] + '\\n';\n                    }\n\n                    gw.description += `\\n\\nThe winners are..\\n${winnerText}`;\n                    giveawayMessage.edit({\n                        embed: gw\n                    });\n                    channelToFetch.send(`🎉 Congratulations! 🎉 \\n ${winnerText} \\nThey have won **${giveawaysDue[preCount][\"itemGivingAway\"]}**`);\n\n                } else {\n                    gw.description += \"\\n\\nNo one entered the giveaway and thus no one won.\";\n                    giveawayMessage.edit({\n                        embed: gw\n                    });\n                    channelToFetch.send(`🎉 Giveaway Ended 🎉\\n\\nNo one entered the giveaway and thus no one won.`);\n                }\n            })\n        })\n    }\n    \n    counter += 1;\n    if (counter >= giveawaysDue.length) {\n        clearInterval(interval);\n    }\n}\n\n// VersionCheck:2","storage":"0","varName":"","name":"Run Script"},{"time":"7","measurement":"1","name":"Wait"},{"storage":"3","varName":"giveawayRan","changeType":"0","value":"null","name":"Control Variable"}],"temp2":"America/New_York"},{"name":"giveawayStart","temp":"","event-type":"1","_id":"jEKcf","actions":[{"behavior":"0","interpretation":"1","code":"if (globalVars(\"giveawayStartAlreadyRan\") == null) {\n\n    Actions.storeValue(true, 3, \"giveawayStartAlreadyRan\", cache);\n\n    const fs = require('fs');\n    const request = require('request');\n    const Files = Actions.getDBM().Files;\n    var checkUpdates = true;\n\n    if (checkUpdates) {\n        request('https://raw.githubusercontent.com/ItzPike/DBM-Rawdata-Releases/master/Giveaway%20Rewritten/versionCheck.json', function(error, response, body) {\n            if (response.statusCode == 200) {\n                var allVersions = JSON.parse(body);\n\n                var commandVersions = {};\n                var eventVersions = {};\n                var commandKeys = [];\n                var eventKeys = [];\n\n                allVersions[\"commands\"].forEach(commandVer => {\n                    commandVersions[commandVer[0]] = commandVer[1];\n                    commandKeys.push(commandVer[0]);\n                });\n\n                allVersions[\"events\"].forEach(eventVer => {\n                    eventVersions[eventVer[0]] = eventVer[1];\n                    eventKeys.push(eventVer[0])\n                })\n\n                fs.readFile(\"./data/commands.json\", async function(err, data) {\n                    var data = JSON.parse(data);\n\n                    var systemCommands = await data.filter(command => command != null && commandKeys.includes(command[\"_id\"]));\n\n                    for (i = 0; i < systemCommands.length; i++) {\n                        var systemActionFind = await systemCommands[i][\"actions\"].filter(actionInfo => actionInfo.name = \"Run Script\" && actionInfo.code != null);\n\n                        if (systemActionFind.length != 0) {\n                            var versionCheckSplit = systemActionFind[0].code.split(\"VersionCheck:\");\n                            if (versionCheckSplit[1] != null && versionCheckSplit[1] != commandVersions[systemCommands[i][\"_id\"]] && !isNaN(versionCheckSplit[versionCheckSplit.length - 1])) {\n                                console.log(`[Giveaway Rewritten] The command ${systemCommands[i][\"name\"]} needs an update!`)\n                            }\n                        }\n                    }\n                })\n\n                fs.readFile(\"./data/events.json\", async function(err, data) {\n                    var data = JSON.parse(data);\n\n                    var systemEvent = await data.filter(event => event != null && eventKeys.includes(event[\"_id\"]));\n\n                    for (i = 0; i < systemEvent.length; i++) {\n                        var systemEventFind = await systemEvent[i][\"actions\"].filter(actionInfo => actionInfo.name = \"Run Script\" && actionInfo.code != null);\n\n                        if (systemEventFind.length != 0) {\n                            var versionCheckSplit = systemEventFind[0].code.split(\"VersionCheck:\");\n                            if (versionCheckSplit != null && versionCheckSplit[versionCheckSplit.length - 1] != eventVersions[systemEvent[i][\"_id\"]] && !isNaN(versionCheckSplit[versionCheckSplit.length - 1])) {\n                                console.log(`[Giveaway Rewritten] The event ${systemEvent[i][\"name\"]} needs an update!`)\n                            }\n                        }\n                    }\n                })\n            }\n        });\n    }\n\n    if (globalVars(\"giveawaySystemMoved\") == null) {\n        Files.saveGlobalVariable(\"giveawaySystemMoved\", true);\n\n        if (!fs.existsSync(`./data/giveawaySystem`)) {\n            fs.mkdirSync(`./data/giveawaySystem`);\n        }\n\n        [\"giveawayData\"].forEach(fileName => {\n            if (fs.existsSync(`./data/${fileName}.json`)) {\n                fs.renameSync( `./data/${fileName}.json`, `./data/giveawaySystem/${fileName}.json`);\n            }\n        });\n    }\n\n    if (!fs.existsSync('./data/giveawaySystem/giveawayData.json')) {\n        fs.writeFile(\"./data/giveawaySystem/giveawayData.json\", \"{}\", function(err) {\n            if (err) {\n                return console.log(err);\n            }\n            \n            Actions.giveawaySystem = {};\n        });\n    } else {\n        fs.readFile('./data/giveawaySystem/giveawayData.json', async function read(err, data) {\n            if (err) {\n                throw err;\n            }\n\n            Actions.giveawaySystem = JSON.parse(data);\n        })\n    }\n}\n\n// VersionCheck:2","storage":"0","varName":"","name":"Run Script"}]}]